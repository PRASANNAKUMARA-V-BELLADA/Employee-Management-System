import psycopg2
import datetime
from psycopg2 import sql
EmpManage={}
try:
    conn = psycopg2.connect( 
     host="192.168.2.12", 
     database="test", 
     user="senscio", 
     password="Agile2022#" 
    ) 
except Exception as e:
    print("Database is closed",e)

cursor = conn.cursor()
 # Create table query
'''
create_table_query = """
     Create table cemployee(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,name varchar(50),position varchar(50),department varchar(20),Hire_Date date,email varchar(50),PhoneNo varchar(20),address varchar(50),Salary int,status varchar(20));
  """

    # Execute the query
cursor.execute(create_table_query)
    # Commit the changes
conn.commit()
'''
class MyClass:
    def addEmployee(self,EmpManage):
       print(" ||You Entered Inside AddEmployee||")
       print(" **Welcome To Add Employee**")
       while True:
         try:
           choice=int(input("Are You Want To Add Employee? \n 1]Yes \n 2]No \n Choose Now->"))
           lst=EmpManage.keys()
           ids=len(lst)+1
           while ids in EmpManage.keys():
                  ids-=1
           data1= []
           data=[]
           #data1=[('klm','manager','it','2022-01-01','klm@gmail.com','123-234-4511','bll',56000,'active'),('Plm','developer','it','2022-01-01','plm@gmail.com','223-234-4511','b2ll',56000,'active')]
           if choice==1:
             while True:
                try:
                     name=str(input("Enter The EmployeeName: \n ->"))
                     if name.isnumeric():
                         print("Name Should Not Be Only Numbers...\n")
                         continue
                     elif name=='':
                         print("Name Should Not Be Empty....\n")
                         continue
                     else:
                         data.append(name.lower())
                         break
                except:
                      print("Invalid Name..")
                      continue

             while True:
                try:
                   position=str(input("Enter The Employee Position as Manager or Developer:\n ->"))
                   if position.isnumeric():
                       print("Position Should Not Be Only Numbers...\n")
                   elif position=='':
                     print("Position Should Not Be Empty....\n")
                   else:
                     if position.lower()=='manager':
                       data.append(position)
                       break
                     elif position.lower()=='developer':
                       data.append(position)
                       break
                     else:
                      print('Invalid Position is Entered...')
                     continue
                except:
                   print("Invalid Name..")
                   continue

             while True:
                try:
                    dpt=str(input("Enter The Employee Department as HR or IT or Sales:\n ->"))
                    if dpt.isnumeric():
                        print("Department Should Not Be Only Numbers...\n")
                    elif dpt=='':
                        print("Department Should Not Be Empty....\n")
                    else:
                       if dpt.lower()=='it':
                          data.append(dpt)
                          break
                       elif dpt.lower()=='hr':
                          data.append(dpt)
                          break
                       elif dpt.lower()=='sales':
                          data.append(dpt)
                          break
                       else:
                          print('Invalid Position is Entered...')
                          continue
                except:
                    print("Invalid Name..")
                    continue

             while True:
                   hire_date=(input("Enter The HireDate (YYYY-MM-DD):\n ->"))
                   if hire_date=='':
                       print("HireDate ShouldNot Be Empty,....Please Try Again:\n")
                       continue
                   try:
                      lst=hire_date.split("-")
                      print(lst)
                      y=lst[0]
                      b=int(y)
                      if b==0:
                          year=0
                          break
                      m=lst[1].strip()
                      x= int(m)
                      if x>=1 and x<=12:
                                   d=lst[2].strip()
                                   w=int(d)
                                   if w>=1 and w<=31:
                                       if len(y)==4 and len(m)==2 and len(d)==2:
                                          data.append(hire_date)
                                          break
                                       else:  
                                          print("Invalid Date Format \n \n")
                                          continue
                                   else:
                                       print("Please Enter Valid Day(01 to 31)..\n")
                                       continue
                      else:
                         print("Please Enter Valid Month(01 to 12)..\n")
                         continue
                   except ValueError:
                      print("...Date Value Is Invalid...\n")
                      continue
                   except:
                     print("Invalid Date \n")
                     continue

             while True:
               try:
                 mail=str(input("Enter The Employee Email:\n ->"))
                 if mail.isnumeric():
                   print("Position Should Not Be Only Numbers...\n")
                 elif mail=='':
                   print("Position Should Not Be Empty....\n")
                 else:
                   if '@' in mail.lower() and  '.com' in mail.lower():
                       data.append(mail)
                       break
                   else:
                     print('Invalid Email is Entered...Try Again')
                     continue
               except:
                  print("Invalid Email..")
                  continue

             while True:
               try:
                  pno=str(input("Enter The Employee PhoneNumber(xyz-xyz-wxyz):\n ->"))
                  res=pno.split('-')
                  if pno=='':
                     print("Phone Number Should Not Be Empty...\n")
                     continue
                  elif res[0].isnumeric() and len(res[0])==3 and res[1].isnumeric() and len(res[1])==3 and res[2].isnumeric() and len(res[2])==4:
                     data.append(pno)
                     break;
                  else:
                     print("Phone Number is not in valid format....Try Again,..")
                     continue
               except:
                  print("Invalid Email..")
                  continue

             while True:
                try:
                   address=str(input("Enter The Employee Address:\n ->"))
                   if address.isnumeric():
                     print("address Should Not Be Only Numbers...\n")
                     continue
                   elif address=='':
                      print("address Should Not Be Empty....\n")
                      continue
                   else:
                     data.append(address)
                     break
                except:
                     print("Invalid Email..")
                     continue
        
             while True:
                try:
                   salary=int(input("Enter The Employee Salary:\n ->"))
                   if not salary:
                      print("salary Should Not Be Empty....\n")
                      continue
                   else:
                      data.append(salary)
                      break
                except Exception as e:
                    print("Invalid Salary...",e)
                    continue
             status='inactive'
             data.append(status)
             res=tuple(data)
             data1.append(res)
             try:
                query="""insert into bemployee(name,position,department,hire_date,email,phoneno,address,salary,status) VALUES"""
                print("-----")
                args = ','.join(cursor.mogrify("(%s,%s,%s,%s,%s,%s,%s,%s,%s)", i).decode('utf-8') for i in data1)
                print("args : " , args)
                cursor.execute(query+args)
                print("Table values added")
                print(">>>>>>>>>Employee Added Successfully\n")
                conn.commit()
             except Exception as e:
                 print("Table value not added",e)
             #EmpManage.update({ids:data})
             print("Again",end=" ")
             continue
           elif choice==2:
               print("--Comming Out Of AddEmployee Task>>>>>>>>>\n")
               break
           else:
               print("Choice Allowed is Either 1 or 2...Please Try Again...\n")
               continue
         except:
             print("Choice Allowed is Either 1 or 2...Please Try Again...\n")
             continue
         

       

    def viewEmployees(self,EmpManage):
        print(" ||You Entered Inside ViewEmployee||")
        print(" **Welcome To View Employee**")
        cursor.execute("select * from bemployee order by id")
        rows=cursor.fetchall()
        if not rows:
            print("Your EmployeeList Is Empty....")
        else:
            print(f'{'ID':<5}{'Name':<15}{'Position':<10}{'Department':<14}{'DateOfHire':<12}{'Email':<15}{'PhoneNumber':<15}{'Address':<10}{'salary':<10}{'status':<10}')
            print('-'*118)
            data=[]
            import datetime
            for row in rows:
                id, name, position, department, date_of_hire, email, phone_number, address, salary, status = row
                if isinstance(date_of_hire, datetime.date):
                    date_of_hire = date_of_hire.strftime("%Y-%m-%d")
                print(f"{id:<5}{name:<15}{position:<10}{department:<14}{date_of_hire:<12}{email:<15}{phone_number:<15}{address:<10}{salary:<10}{status:<10}")
        print("--Comming Out Of ViewEmployee>>>\n")

    def UpdateEmployee(self,EmpManage):
        cursor.execute("select * from bemployee")
        rows=cursor.fetchall()
        if not rows:
            print("Your EmployeeList Is Empty....")
        else:
            try:
                ids=int(input("Enter the Employee ID \n ->"))
                cursor.execute("select * from bemployee where id=%s",(ids,))
                rows=cursor.fetchall()
                for row in rows:
                   da1,da2,da3=row[2],row[3],row[9];
                while True:
                    choice=int(input("Are You Want To Update Employee Position? \n 1]Yes \n 2]No \n Choose Now->"))
                    if choice==1:
                      try:
                           position=str(input("Enter The Employee Updated Position as Manager or Developer:\n ->"))
                           if position.isnumeric():
                                print("Position Should Not Be Only Numbers...\n")
                           elif position=='':
                                 print("Position Should Not Be Empty....\n")
                           else:
                                if position.lower()=='manager':
                                       da1=position
                                       break
                                elif position.lower()=='developer':
                                       da1=position
                                       break
                                else:
                                     print('Invalid Position is Entered...')
                                     continue
                      except:
                          print("Invalid Position..")
                          continue
                    else:
                        break
                while True:
                    choice=int(input("Are You Want To Update Employee Department? \n 1]Yes \n 2]No \n Choose Now->"))
                    if choice==1:
                      try:
                        dpt=str(input("Enter The Employee Department as HR or IT or Sales:\n ->"))
                        if dpt.isnumeric():
                            print("Department Should Not Be Only Numbers...\n")
                        elif dpt=='':
                            print("Department Should Not Be Empty....\n")
                        else:
                           if dpt.lower()=='it':
                                da2=dpt
                                print(">>>Department Updated Successfully......")
                                break
                           elif dpt.lower()=='hr':
                                da2=dpt
                                print(">>>Department Updated Successfully......")
                                break
                           elif dpt.lower()=='sales':
                                da2=dpt
                                print(">>>Department Updated Successfully......")
                                break
                           else:
                              print('Invalid Department is Entered...')
                              continue
                      except:
                       print("Invalid Department Name..")
                       continue
                    elif choice==2:
                         break
                    else:
                        print("Your Choice is not either 1 or 2 ..Try Again..\n ")
                        continue
                while True:
                       try:
                           choice=int(input("Are You Want To Update Employee Status? \n 1]Yes \n 2]No \n Choose Now->"))
                           if choice==1:
                               d3=str(input("Enter the status is active or terminated:\n ->"))
                               if not d3.isnumeric():
                                pass
                               else:
                                print("Only Numbers Not Allowed..Please Try Again \n")
                                continue
                               if d3!="":
                                   if d3.lower()=='active':
                                      da3=d3
                                      print("[[[Status Updated successfully]]]\n")
                                      break
                                   elif d3.lower()=="terminated":
                                      da3=d3
                                      print("[[[Status Updated successfully]]]\n")
                                      break
                                   else:
                                       print("Status Updation Value Is Wrong \n\n")
                                       continue
                               else:
                                 print("Status Should Not Be Empty..Please Try Again..\n")
                                 continue
                       except:
                              print("Please Enter Text For Status,..Please Try Again.. \n\n ")
                              continue 
                try:
                   query=sql.SQL("update bemployee set position=%s,department=%s,status=%s where id=%s") 
                   cursor.execute(query,(da1,da2,da3,ids))
                   print("Table values Updated")
                   conn.commit()
                except Exception as e:
                     print("Table value not updated",e)
                print(">>>>Updating Employee Is Successful.....")
            except:
                print("Id Must Be Numbers Only ..")

    def deleteEmployee(self,EmpManage):
        print(" ||You Entered Inside DeleteEmployee||")
        print(" **Welcome To Delete Employee**")
        cursor.execute("select * from bemployee")
        rows=cursor.fetchall()
        if not rows:
            print("Your EmployeeList Is Empty....")
        else:
           try:
            ids=int(input("Enter the Employee ID \n ->"))
            cnt=1
            for row in rows:
               if ids!=row[0]:
                   if cnt==len(rows):
                       print("The Id {} is not Present".format(ids))
                       break
                   else:
                       cnt+=1
               else:
                   print(rows)
                   print("------",ids)
                   cursor.execute("delete from bemployee where id=%s",(ids,))
                   conn.commit();
                   print(">>>>Employee is deleted Successfully...")
                   break
           except Exception as e:
               print("Id must always in numbers......",e)
                
    def searchEmployee(self,EmpManage):
       print(" ||You Entered Inside SearchEmployee||")
       print(" **Welcome To Search Employee**")
       value=input("Enter Employee ID or Name to search:\n ->")
       if value.isnumeric():
           ids=int(value)
           cursor.execute("select * from bemployee")
           rows=cursor.fetchall()
           cnt,present=1,1
           for row in rows:
                if row[0]==ids:
                    present=1
                    break
                elif row[0]!=ids and cnt==len(rows):
                   print("The Id {} is not Present".format(ids))
                   present=0
                   break
                else:
                    cnt+=1
           if present==1:
              print(f'{'ID':<5}{'Name':<15}{'Position':<10}{'Department':<14}{'DateOfHire':<12}{'Email':<15}{'PhoneNumber':<15}{'Address':<10}{'salary':<10}{'status':<10}')
              print("-"*118)
              cursor.execute("select * from bemployee where id=%s",(ids,))
              rows=cursor.fetchall()
              for row in rows:
                 id, name, position, department, date_of_hire, email, phone_number, address, salary, status = row
                 if isinstance(date_of_hire, datetime.date):
                    date_of_hire = date_of_hire.strftime("%Y-%m-%d")
                 print(f"{id:<5}{name:<15}{position:<10}{department:<14}{date_of_hire:<12}{email:<15}{phone_number:<15}{address:<10}{salary:<10}{status:<10}")
       elif value=="":
           print("Sorry You Not Entered Anything...")
       else:
            print(f'{'ID':<5}{'Name':<15}{'Position':<10}{'Department':<14}{'DateOfHire':<12}{'Email':<15}{'PhoneNumber':<15}{'Address':<10}{'salary':<10}{'status':<10}')
            print('-'*118)
            cursor.execute("select * from bemployee where name=%s",(value.lower(),))
            rows=cursor.fetchall()
            for row in rows:
                id, name, position, department, date_of_hire, email, phone_number, address, salary, status = row
                if isinstance(date_of_hire, datetime.date):
                    date_of_hire = date_of_hire.strftime("%Y-%m-%d")
                print(f"{id:<5}{name:<15}{position:<10}{department:<14}{date_of_hire:<12}{email:<15}{phone_number:<15}{address:<10}{salary:<10}{status:<10}")
                print("Successfully Done And Comming Out Of Search Employee>>>>")
                break;
    def listByDepartment(self,EmpManage):
        print(" ||You Entered Inside ListByDepartment||")
        print(" **Welcome To ListByDepartment**")
        while True:
            try:
                dpt=str(input("Enter The Employee Department as HR or IT or Sales:\n ->"))
                if dpt.isnumeric():
                   print("Department Should Not Be Only Numbers...\n")
                elif dpt=='':
                   print("Department Should Not Be Empty....\n")
                else:
                   print(f'{'ID':<5}{'Name':<15}{'Position':<10}{'Department':<14}{'DateOfHire':<12}{'Email':<15}{'PhoneNumber':<15}{'Address':<10}{'salary':<10}{'status':<10}')
                   print('-'*118)
                   cursor.execute("select * from bemployee where department=%s",(dpt.lower(),))
                   rows=cursor.fetchall()
                   for row in rows:
                       id, name, position, department, date_of_hire, email, phone_number, address, salary, status = row
                       if isinstance(date_of_hire, datetime.date):
                          date_of_hire = date_of_hire.strftime("%Y-%m-%d")
                       if department.lower()=='it':
                            print(f"{id:<5}{name:<15}{position:<10}{department:<14}{date_of_hire:<12}{email:<15}{phone_number:<15}{address:<10}{salary:<10}{status:<10}")
                       elif department.lower()=='hr':
                            print(f"{id:<5}{name:<15}{position:<10}{department:<14}{date_of_hire:<12}{email:<15}{phone_number:<15}{address:<10}{salary:<10}{status:<10}")
                       elif department.lower()=='sales':
                            print(f"{id:<5}{name:<15}{position:<10}{department:<14}{date_of_hire:<12}{email:<15}{phone_number:<15}{address:<10}{salary:<10}{status:<10}")
                   print("Successfully Done And Comming Out Of List By Department>>>>")
                   break
            except:
                print("Invalid Department Name..")
                continue
    def salaryManagement(self,EmpManage):
        print(" ||You Entered Inside SalaryManagement||")
        print(" **Welcome To SalaryManagement**")
        while True:
            cursor.execute("select * from bemployee")
            rows=cursor.fetchall()
            if not rows:
               print("Your EmployeeList Is Empty....")
               break
            try:
               ids=int(input("Enter The Employee Id For Updating His Salary: \n ->"))
               cnt,present=1,1
               for row in rows:
                   if row[0]==ids:
                       present=1
                       break
                   elif row[0]!=ids and cnt==len(rows):
                      print("Id You Entered Is Not There....Try Again....\n ")
                      present=0
                      continue
                   else:
                       cnt+=1
               if present==1:
                   cursor.execute("select * from bemployee where id=%s",(ids,))
                   rows=cursor.fetchall()
                   for row in rows:
                     while True:
                       try:
                         slr=int(input("Now Update The Salary Of {}:-> ".format(row[8])))
                         cursor.execute("update bemployee set salary=%s where id=%s",(slr,ids,))
                         conn.commit()
                         print("Successfully Done And Comming Out Of Salary Management>>>>\n")
                         break
                       except Exception as e:
                        print("Salary Must Be In Numbers...Try Again...\n",e)
                        continue
                     break
                   break

            except:
              print("Id Must Be In Numbers ...Try Again...")
              continue





if __name__=='__main__':
     mc=MyClass()
     print("\n*^*^*^*^*^*^*^WelCome To Employee Management Application*^*^*^*^*^*^*^*")
     print("                ====================================\n")
     while True:
        try:
            task=int(input("Select The Choice Below:\n 1.Add Employee \n 2.View Employee \n 3.Update Employee \n 4.Delete Employee \n 5.Search Employee \n 6.List Of Employee By Department \n 7.Salary Management \n 8.Close Application:\n Choose Now:"))
            print("")
        except:
               print("<<Please Enter In Numbers..>>\n")
               print("--Going Back To Choice--")
               continue
        match task:
          case 1:
                 mc.addEmployee(EmpManage)
                 try:
                     print("Welcome Back! What would you like to do next?")
                     work = int(input("1. Go Through the Application Again\n"
                  "2. Close the Application\n Choose Now->"))
                     print("")
                 except:
                      print("<<Please Enter In Numbers..>>\n")
                      print("--Going Back To Choice--")
                      continue
                 else:
                      if work==1:
                        continue
                      elif work==2:
                        break
                      else:
                         print("Your Choice is Neither 1 Nor 2 ,Now Again Go Through Application..\n")
                         continue
          case 2:
              mc.viewEmployees(EmpManage)
              try:
                 print("Welcome Back! What would you like to do next?")
                 work = int(input("1. Go Through the Application Again\n"
                  "2. Close the Application\n Choose Now->"))
                 print("")
              except:
                 print("<<Please Enter In Numbers..>>\n")
                 print("--Going Back To Choice--")
                 continue
              else:
                  if work==1:
                        continue
                  elif work==2:
                        break
                  else:
                       print("Your Choice is Neither 1 Nor 2 ,Now Again Go Through Application..\n")
                       continue
        
          case 3:
             mc.UpdateEmployee(EmpManage)
             try:
                 print("Welcome Back! What would you like to do next?")
                 work = int(input("1. Go Through the Application Again\n"
                  "2. Close the Application\n Choose Now->"))
                 print("")
             except:
                 print("<<Please Enter In Numbers..>>\n")
                 print("--Going Back To Choice--")
                 continue
             else:
                 if work==1:
                        continue
                 elif work==2:
                        break
                 else:
                       print("Your Choice is Neither 1 Nor 2 ,Now Again Go Through Application..\n")
                       continue
          
          case 4:
              mc.deleteEmployee(EmpManage)
              try:
                 print("Welcome Back! What would you like to do next?")
                 work = int(input("1. Go Through the Application Again\n"
                  "2. Close the Application\n Choose Now->"))
                 print("")
              except:
                 print("<<Please Enter In Numbers..>>\n")
                 print("--Going Back To Choice--")
                 continue
              else:
                 if work==1:
                        continue
                 elif work==2:
                        break
                 else:
                     print("Your Choice is Neither 1 Nor 2 ,Now Again Go Through Application..\n")
                     continue
          case 5:
              mc.searchEmployee(EmpManage)
              try:
                 print("Welcome Back! What would you like to do next?")
                 work = int(input("1. Go Through the Application Again\n"
                  "2. Close the Application\n Choose Now->"))
                 print("")
              except:
                 print("<<Please Enter In Numbers..>>\n")
                 print("--Going Back To Choice--")
                 continue
              else:
                 if work==1:
                        continue
                 elif work==2:
                        break
                 else:
                     print("Your Choice is Neither 1 Nor 2 ,Now Again Go Through Application..\n")
                     continue
          case 6:
              mc.listByDepartment(EmpManage)
              try:
                 print("Welcome Back! What would you like to do next?")
                 work = int(input("1. Go Through the Application Again\n"
                  "2. Close the Application\n Choose Now->"))
                 print("")
              except:
                 print("<<Please Enter In Numbers..>>\n")
                 print("--Going Back To Choice--")
                 continue
              else:
                 if work==1:
                        continue
                 elif work==2:
                        break
                 else:
                     print("Your Choice is Neither 1 Nor 2 ,Now Again Go Through Application..\n")
                     continue
          case 7:
              mc.salaryManagement(EmpManage)
              try:
                 print("Welcome Back! What would you like to do next?")
                 work = int(input("1. Go Through the Application Again\n"
                  "2. Close the Application\n Choose Now->"))
                 print("")
              except:
                 print("<<Please Enter In Numbers..>>\n")
                 print("--Going Back To Choice--")
                 continue
              else:
                 if work==1:
                        continue
                 elif work==2:
                        break
                 else:
                     print("Your Choice is Neither 1 Nor 2 ,Now Again Go Through Application..\n")
                     continue
             
          case 8:
              break
          case _:
             print("Invalid Functionality\n")
             print("--Going Back To Choice--")
             continue
     print("Thank You For Using This Application")

